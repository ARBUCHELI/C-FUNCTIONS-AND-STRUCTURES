# STRUCTURES
------------

* Introduction
--------------
1 min
Throughout this course, we have defined many different variable types like, int and char. These are known as the basic types and are built-in to C.

We’ve also defined data types like arrays and pointers which are known as derived types. Derived types tend to be a collection of basic types to create a new, more powerful data type. We 
will now explore another derived type, the structure.

In C, structures allow programmers to create user-defined data types. Structures, like arrays, allow you to collect many data types into one single data type. But unlike arrays, 
structures can be a collection of multiple data types.

Variable Types in a Structure

{	char c = 'x';		}
{	 int a = 5;		}
{      double b = 2.3;		}
{    char* name = "Ada";        }	

The above image represents a structure and the different types of variables contained within it. This type of “packaging” is beneficial because it helps build and pass around logically related data in a single user-defined data type.

* Instructions
--------------
Take a look at and run the code in the workspace. Notice in the script.c file all the variables that are defined. Think about how you could use structures to organize the data.

script.c
--------
#include <stdio.h>

int main(void) {
  char firstName[] = "Ada";
  char lastName[] = "Lovelace";
  int age = 28;
  char profession[] = "Mathematician";

  printf("My name is %s %s, I am %d years old and I am a %s.", firstName, lastName, age, profession);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Defining Structures
---------------------
4 min
To help us understand how to include structures (also called structs) in our code, let’s look at how to define them:

Structure components, the keyword struct, the name Bottle and member variables declare inside curly braces

In the image above:

	. The struct keyword initiates the structure type definition

	. Bottle is the name of the new structure type

	. A set of curly braces, {}, to enclose the struct member variables

	. Inside the braces, the member variables are “packaged” together.

Member variables can be any basic types (int, char, etc). They can also be derived types like arrays, pointers, and even other structures. It’s important to note that the member variables 
should only be declared and not initialized (we will learn about this later). Attempting to give the member variable values will lead to an error.

* Instructions
--------------
Checkpoint 1 Passed
1.
Time to define your own structure.

Within the main() function:

	. Declare a structure named Person

	. Keep the body of the structure empty

Hint
Use the following syntax:

struct structureName {

};

Checkpoint 2 Passed
2.
Inside the Person structure:

	. Define a string member variable, firstName with a length of 25

	. Define an int member variable, age

Hint
Use the following syntax:

struct structureName {
  memberType1 memberName1;
  memberType2 memberName2;
};

script.c
--------
#include <stdio.h>

int main(void) {
  // Write your code below
  struct Person 
  {
    char firstName[25];
    int age;
  };
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Initializing Structures
-------------------------
7 min
Now that we know how to define structures, let’s take a look at how we can use them in our code.

struct Bottle {
  char* name;
  int maxCapacity;
  int currentCapacity;
};

struct Bottle bottle1 = {"superBottle", 24, 0};

The above example defines the struct Bottle from the last exercise. The last line of the code then initializes a struct using an ordered notation:

	. The struct keyword - once again

	. The user-defined struct type, Bottle

	. The name of the structure variable, bottle1

	. The member variable value assignments within a set of curly braces, {}

The order of values assigned to the member variables match the order in which the variables were defined in the structure.

If you wish to be more specific with your initialization and not worry about putting elements in the right order you can do it using an unordered notation:

struct Bottle bottle1 = {
  .maxCapacity = 24,
  .name = "superBottle",
  .currentCapacity = 0
};

Once initialized, structures allow you to work with complex data types in a more cohesive and efficient manner.

* Instructions
--------------
Checkpoint 1 Passed
1.
Before you initialize your first structure, expand the Person struct.

Inside the Person definition and right after the firstName definition:

	. Add a lastName string member variable with a length of 40

Hint
Use the following syntax:

struct structureName {
  memberType1 memberName1;
  newType newName;
  memberType2 memberName2;
};

Checkpoint 2 Passed
2.
Instantiate a person using the Person struct.

Inside the main() function and using the ordered notation:

	. Initialize the Person structure, person1 with the data below

	. Be sure to place the data in the same order as the member variable definitions

First Name: Ada
Last Name: Lovelace
Age: 28


Hint
Use the following syntax to initialize each structure variable:

struct structType variableName = {value1, value2, value3};

Checkpoint 3 Passed
3.
Instantiate another person using the Person struct.

Inside the main() function and using the ordered notation:

	. Initialize the Person structure, person2 with the data below

	. Be sure to place the data in the same order as the member variable definitions

First Name: Marie
Last Name: Curie
Age: 44


Hint
Use the following syntax to initialize each structure variable:

struct structType variableName = {value1, value2, value3};

script.c
--------
#include <stdio.h>

int main(void) {
  struct Person {
    char firstName[25];
    // Write your code below
    char lastName[40];
    int age;
  };
  
  // Write your code below
  struct Person person1 = {"Ada", "Lovelace", 28};

  struct Person person2 = {"Marie", "Curie", 44};
};

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Why Use Structures
--------------------
7 min
Let’s now take a step back and discuss why we would want to use structures. Look at an example of a program that uses bottle data without structures.

char bottleName1[]  = "Medium Bottle";
int maxCapacity1 = 24;
int currentCapcity1 = 0;

char bottleName2[]  = "Large Bottle";
int maxCapacity2 = 48;
int currentCapcity2 = 20;

Notice that we need to keep track of six variables while working with this bottle data. As we increase the number of bottles, the number of variables would increase by 3 per bottle. This 
approach can get extremely unmaintainable.

In a small number of situations, we could possibly use arrays. But that’s only when the data is the same type, so this isn’t useful all the time.

struct Bottle {
  char* name;
  int maxCapacity;
  int currentCapacity;
};

struct Bottle bottle1 = {"Medium Bottle", 24, 0};
struct Bottle bottle2 = {"Large Bottle", 48, 20};

Using a struct to encapsulate all the members that represent a Bottle we can:

	1. Reduce complexity by representing a set of data with one variable

	2. Package different, but logically similar, data together

	3. Better represent real-world “things” into data types

Being able to represent data using structures is extremely beneficial as you continue working on more complex real-world problems.

* Instructions
--------------
Checkpoint 1 Passed
1.
Someone has been working with a group of variables that represent coffee table data. Use structs to organize this data.

Above the main() function:

	. Create a Table structure

	. Define the following variables inside the structure, length, width, height and color[20]

Hint
Use the following syntax:

struct structureName {
  memberType1 memberName1;
  memberType2 memberName2;
  memberType3 memberName3;
  memberType4 memberName4[20];
};

Checkpoint 2 Passed
2.
Now initialize the data using the defined structure.

Inside the main() function:

	. Initialize the table1 using the Table struct and the first set of table data

	. Initialize the table2 using the Table struct and the second set of table data

Hint
Use the following syntax to initialize each structure variable:

struct structType variableName = {value1, value2, value3, value4};

script.c
--------
#include <stdio.h>

// Write your code below
struct Table {
  int length;
  int width;
  int height;
  char color[20];
};

int main(void) {
  int table1Length = 24;
  int table1Width = 24;
  int table1Height = 20;
  char table1Color[20] = "Dark Brown";

  int table2Length = 42;
  int table2Width = 18;
  int table2Height = 32;
  char table2Color[20] = "Matte Black";

  // Write your code below
  struct Table table1 = {24, 24, 20, "Dark Brown"};
  struct Table table2 = {42, 18, 32, "Matte Black"};
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Structure Dot Notation
------------------------
4 min
Now that we’ve leveraged that power of structures to package variables together we can discuss how we can access each member variable individually using dot notation.

Dot notation is a C operator that allows you to access and modify a member variable of a structure.

struct Bottle {
  char* name;
  int maxCapacity;
  int currentCapacity;
};

struct Bottle myBottle = {"Medium Bottle", 24, 0};

// Fill some of myBottle
myBottle.currentCapacity = 10;
printf("The bottle is now filled to %d", myBottle.currentCapacity);

In the example above:

	. A bottle structure is defined and initialized with the variable myBottle

	. The member variable currentCapacity is accessed and set to 10 with myBottle.currentCapacity = 10

	. The same variable is accessed again using the dot operator and output with printf()

You can also use the dot operator to initialize a structure if you’d like to declare it first without initializing it right away like:

struct Bottle myBottle;
myBottle.name = "Medium Bottle";
myBottle.maxCapacity = 24;
myBottle.currentCapacity = 0;

The dot operator is essential in enhancing the packaging benefits of structs by allowing you to access any of the Bottle member variables through the variable myBottle.

* Instructions
--------------
Checkpoint 1 Passed
1.
The workspace has defined a Person struct. Inside the main() function, person1 and person2 are initialized as Person types and the names of each have also been set.

Following the initialization and using dot notation:

	. Set the age of person1 to 57

	. Set the age of person2 to 27

Hint
Use the following syntax for each structure variable:

structureVariable.memberVariable = value;

script.c
--------
#include <stdio.h>

struct Person {
  char name[40];
  int age;
};

int main(void) {
  struct Person person1 = {"Martin"};
  struct Person person2 = {"Michelle"};
  // Write your code below
  person1.age = 57;
  person2.age = 27;

  printf("Hello my name is %s and I am %d years old.\n", person1.name, person1.age);
  printf("Hello my name is %s and I am %d years old.\n", person2.name, person2.age);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Structure Pointers
--------------------
9 min
Similar to other derived types, like arrays and strings, structures can use a lot of memory. Imagine a structure with multiple strings each able to hold hundreds of characters.

One way to manage memory while working on data types of this size is to use pointers. As a reminder, a pointer is a variable that holds the memory address to another variable.

For structures, this is accomplished by first defining the structure variable, then defining a pointer and assigning it the address to the structure variable.

struct Bottle myBottle = {"Medium Bottle", 24, 0};
struct Bottle* bottlePointer = &myBottle;

In the above example, bottlePointer holds the memory address pointing to myBottle.

To access member variables with bottlePointer and the dot operator we can use the following syntax:

(*bottlePointer).name;
(*bottlePointer).maxCapacity;
(*bottlePointer).currentCapacity;

When using pointers we need to dereference, *, the address to access the variable it points to. When using the dot operator with structure pointers, we also need to wrap the dereference 
in parenthesis, (). If we simply dereference like *aPointer.name, it will result in an error.

Arrow notation can also be used with pointers to structures, as it implicitly does the dereferencing for you.

aPointer->name;
aPointer->maxCapacity;
aPointer->currentCapacity;

Notice how much better the arrow notation reads compared to dot notation. This notation is a clear and simple way to work with user-defined structure pointers.

* Instructions
--------------
Checkpoint 1 Passed
1.
The workspace has two Person data types named person1 and person2.

In the main() function:

	. Create a pointer to person1 called person1Pointer

	. Create another pointer that points to person2 called person2Pointer

Hint
Use the following syntax for both structure variables:

struct structureName* pointerVariable = &structureVariable; 

Checkpoint 2 Passed
2.
Now make some changes to person1.

After the pointer definition and using dereferencing and dot notation:

	. Add 1 to the member variable age of person1

Hint
Use the following syntax:

(*pointerVariable).memberVariable += value;

Checkpoint 3 Passed
3.
Now change the other structure data.

Using arrow notation:

	. Add 10 to the member variable age of person2

Hint
Use the following syntax:

pointerVariable->memberVariable += value;

script.c
--------
#include <stdio.h>

struct Person {
  char name[40];
  int age;
};

int main(void) {
  struct Person person1 = {"Martin", 57};
  struct Person person2 = {"Michelle", 27};
  // Write your code below
  struct Person* person1Pointer = &person1;
  struct Person* person2Pointer = &person2;
  (*person1Pointer).age += 1;
  person2Pointer->age = person2Pointer->age + 10;

  printf("Hello my name is %s and I am %d years old.\n", person1.name, person1.age);
  printf("Hello my name is %s and I am %d years old.\n", person2.name, person2.age);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Structures in Functions
-------------------------
14 min
Let’s wrap up by using structures with functions.

We can specify structures and pointers to structures as parameters to functions:

void myFunction(struct Bottle b, struct Bottle* bPointer)

When passing a structure to a function:

	. A copy of the structure is made so memory usage is a concern

	. Any modifications made to the structure will not affect the original structure, only the copy

When passing a pointer to a structure:

	. Because the pointer is the address of the original structure any modifications to the member variables will affect the original structure

void bottleFunction(struct Bottle b, struct Bottle* bPointer){
  b.name = "Super Large";
  b.maxCapacity = 100;
  bPointer->name = "Super Small";
  bPointer->maxCapacity = 4;    
}

int main(){
  struct Bottle b1 = {"Medium", 24, 9};
  struct Bottle b2 = {"Large", 35, 9};

  bottleFunction(b1, &b2);
}

In the above example:

	. bottleFunction has 2 parameters, a Bottle structure and a pointer to a Bottle structure

	. Inside the function, the structures are accessed the same as they would whether it is a structure or pointer to a structure.

	. The first argument in the call to bottleFunction() inside main() is b1. A copy of this structure is made within bottleFunction() and no changes can be made to the values of b1 
	in main()

	. The second argument in the call to bottleFunction() is &b2: the address of b2. Any change to the member variables using this address will change the values of b2 in main()

We can also return structures by setting the return type in the function signature:

struct Bottle getEmptyBottle(void){
  struct Bottle b = {"My Bottle", 24, 0};
  return b;
}

Notice that structures as parameters and as the return type must use the struct keyword.

* Instructions
--------------
Checkpoint 1 Passed
1.
Time to look at different ways we can work with structures within functions.

In script.c:

	. Define the function ageOne()

	. Give the function a return type of Person

	. The body can be empty.

Remember to use the keyword struct throughout this definition.


Hint
Use the following syntax:

struct structureType functionName() {

} 

Checkpoint 2 Passed
2.
Add some parameters to the ageOne() function definition:

	. The first function parameter should be called friend1 and be of type Person

	. The second parameter should be called friend2Pointer and be a pointer to type Person

Hint
Use the following syntax:

struct structureType functionName(struct structureType p1, struct structureType* p2) {

} 

Checkpoint 3 Passed
3.
Now modify the age member variables within the structures.

Inside ageOne():

	. Add 1 to the age variable in friend1

	. Using the arrow format to dereference, add 1 to the age variable in the structure pointed to by friend2Pointer

	. Return the structure friend1

Hint
Use the following syntax:

structureVariable.memberVariable += 1;
structurePointer->memberVariable += 1;
return structureVariable;

Checkpoint 4 Passed
4.
Now test it all out! There are 2 structures defined in main() to work with the function you created.

Inside the main() function:

	. Call ageOne() and assign the return value to myFriend

	. Set the first argument of ageOne() to myFriend

	. Set the 2nd argument of ageOne() to the address of myOtherFriend

Run the code and see how the data changes.


Hint
Use the following syntax:

structureVariable1 = functionName(structureVariable1, &structureVariable2);

script.c
--------
#include <stdio.h>
struct Person {
  char name[40];
  int age;
};

// Write your function below
struct Person ageOne(struct Person friend1, struct Person* friend2Pointer)
{
   friend1.age += 1;
   friend2Pointer->age += 1;
   return friend1;
}


int main(void) {
  struct Person myFriend = {"Martin", 57};
  struct Person myOtherFriend = {"Michelle", 27};
  // Call your function below
  myFriend = ageOne(myFriend, &myOtherFriend);

  printf("Hello my name is %s and I am %d years old.\n", myFriend.name, myFriend.age);
  printf("Hello my name is %s and I am %d years old.\n", myOtherFriend.name, myOtherFriend.age);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Summary
---------
1 min
Great job learning about structures! We’ve covered many important topics:

	. Structures allow you to create user-defined data types

	. Structures can package together other data types into one type

	. You can define a structure using the struct keyword

	. When defining a structure, the member variables are declared but not instantiated

	. Structures help programs work with complex data and can represent real-world objects

	. You can access member variables with the dot operator

	. You can have a pointer to a structure and access its member variables using the arrow operator

	. You can pass structures and structure pointers to functions
	
	. You can return structures from functions

With our understanding of structures, we can now create and work with complicated data types easily and efficiently.

* Instructions
--------------
Checkpoint 1 Passed
1.
Use the code in the workspace to play around with structures.

What can you add to the Person structure? What are some functions that would help act on the structure?

script.c
--------
#include <stdio.h>
struct Person {
  char name[40];
  int age;
};

struct Person ageOne(struct Person friend1, struct Person* friend2Pointer) {
  friend1.age += 1;
  friend2Pointer->age +=1;
  return friend1;
}

int main(void) {
  struct Person myFriend = {"Martin", 57};
  struct Person myOtherFriend = {"Michelle", 27};
  
  myFriend = ageOne(myFriend, &myOtherFriend);

  printf("Hello my name is %s and I am %d years old.\n", myFriend.name, myFriend.age);
  printf("Hello my name is %s and I am %d years old.\n", myOtherFriend.name, myOtherFriend.age);
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------














































































































































































