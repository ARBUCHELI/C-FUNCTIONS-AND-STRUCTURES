# STRUCTURES
------------

* Introduction
--------------
1 min
Throughout this course, we have defined many different variable types like, int and char. These are known as the basic types and are built-in to C.

We’ve also defined data types like arrays and pointers which are known as derived types. Derived types tend to be a collection of basic types to create a new, more powerful data type. We 
will now explore another derived type, the structure.

In C, structures allow programmers to create user-defined data types. Structures, like arrays, allow you to collect many data types into one single data type. But unlike arrays, 
structures can be a collection of multiple data types.

Variable Types in a Structure

{	char c = 'x';		}
{	 int a = 5;		}
{      double b = 2.3;		}
{    char* name = "Ada";        }	

The above image represents a structure and the different types of variables contained within it. This type of “packaging” is beneficial because it helps build and pass around logically related data in a single user-defined data type.

* Instructions
--------------
Take a look at and run the code in the workspace. Notice in the script.c file all the variables that are defined. Think about how you could use structures to organize the data.

script.c
--------
#include <stdio.h>

int main(void) {
  char firstName[] = "Ada";
  char lastName[] = "Lovelace";
  int age = 28;
  char profession[] = "Mathematician";

  printf("My name is %s %s, I am %d years old and I am a %s.", firstName, lastName, age, profession);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Defining Structures
---------------------
4 min
To help us understand how to include structures (also called structs) in our code, let’s look at how to define them:

Structure components, the keyword struct, the name Bottle and member variables declare inside curly braces

In the image above:

	. The struct keyword initiates the structure type definition

	. Bottle is the name of the new structure type

	. A set of curly braces, {}, to enclose the struct member variables

	. Inside the braces, the member variables are “packaged” together.

Member variables can be any basic types (int, char, etc). They can also be derived types like arrays, pointers, and even other structures. It’s important to note that the member variables 
should only be declared and not initialized (we will learn about this later). Attempting to give the member variable values will lead to an error.

* Instructions
--------------
Checkpoint 1 Passed
1.
Time to define your own structure.

Within the main() function:

	. Declare a structure named Person

	. Keep the body of the structure empty

Hint
Use the following syntax:

struct structureName {

};

Checkpoint 2 Passed
2.
Inside the Person structure:

	. Define a string member variable, firstName with a length of 25

	. Define an int member variable, age

Hint
Use the following syntax:

struct structureName {
  memberType1 memberName1;
  memberType2 memberName2;
};

script.c
--------
#include <stdio.h>

int main(void) {
  // Write your code below
  struct Person 
  {
    char firstName[25];
    int age;
  };
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------



























































