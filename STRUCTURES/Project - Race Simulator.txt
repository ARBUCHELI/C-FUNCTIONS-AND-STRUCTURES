# PROJECT
---------

* Race Simulator
----------------
On your mark, get set, GO! Using structures and the rest of your C knowledge we’ll be creating a race simulator.

First we’ll define our complex data types using structures. Then we’ll create some fun print functions to help update our audience. Finally, we’ll implement functions to help with the 
racing logic and start our race!

* Tasks
-------
13/13 complete
Mark the tasks as complete by checking them off

* Race Prep!
------------
1.
We’ll start by creating our data types for the race.
In the structures section, create a Race structure that has the following member variables:

	. an int - numberOfLaps

	. an int - currentLap

	. a string - firstPlaceDriverName

	. a string - firstPlaceRaceCarColor

Hint
We create a structure with the following format:

struct structureName {
    // uninitialized member variables
};

String member variables can be declared using the char* type.

2.
Next, in the structures section, create a RaceCar structure that has the following members variables:

	. a string - driverName

	. a string - raceCarColor

	. an int - totalLapTime

Hint
We create a structure with the following format:

struct structureName {
    // member variables
};

String member variables can be declared using the char* type.

* Race Pre-Show!
----------------
3.
Since every race needs a fun introduction, let’s create one.

In the print functions section, create the printIntro() function that prints a fun intro message for the race to the console.

For example:

Welcome to our main event digital race fans!
I hope everybody has their snacks because we are about to begin!

Go ahead and call printIntro() from main() to see its output in the console.


Hint
We create a function with the following format:

returnType functionName(params, ifAny) {
    // function body
}

If the function is just printing we dont need to return anything.

We can also use printf() to print to console.

4.
Besides an introduction, a race always has a countdown!

In the print functions section, create the printCountDown() function that prints a fun count down message for our racers.

For example:

Racers Ready! In...
5
4
3
2
1
Race!

Go ahead and call printCountDown() from the main() function to see its output.


Hint
We create a function with the following format:

returnType functionName(params, ifAny) {
    // function body
}

If the function is just printing we dont need to return anything.

We can also use printf() to print to console and use the \n escape character to create line breaks.

5.
Once the race does begin, we need to be able to inform the audience whose in the lead after every lap.

In the print functions section, create the printFirstPlaceAfterLap() function that has a single Race type parameter named race.

The function should access the race member variables and print a message announcing the current lap, the name of the first place driver, and the color of race car they’re driving.

For example:

After lap number 2
First Place Is: George in the yellow race car!


Hint
You can define a structure type parameter in a function like:

void myFunc(struct Race race); // `Race` type parameter declared named `race`

You can access structure type member variables using the . operator.
For example using a RaceCar type:

raceCar1.driverName // access member variable `driverName`

You can use printf() to print to console with the following format specifiers:

	. %s to insert a string into the string

	. %d to insert an integer into the string For example:

char* myName = "Bob";
int myAge = 30;
printf("My name is %s, I am %d years old", myName, myAge); 
// OUTPUT: My name is Bob, I am 30 years old

6.
When the race ends, we need to congratulate the winner and tell the audience the race is over.

In the print functions section, create the printCongratulation() function that has a Race type parameter named race.

The function should access the race member variables and print a congratulation message with the name of the driver and the color of race car they were driving.

For example:

Let's all congratulate Cosmo in the orange race car for an amazing performance.
It truly was a great race and everybody have a goodnight!


Hint
You can define a structure type parameter in a function like:

void myFunc(struct RaceCar raceCar); // `RaceCar` type parameter declared named `racecar`

You can access structure type member variables using the . operator.
For example using a RaceCar type:

raceCar1.driverName // access member variable `driverName`

You can use the %s format specifier to specify a string to be formatted into the output of printf() like:

char* name = "Bob";
printf("Hello World, my name is %s!", name);
// OUTPUT: Hello World, my name is Bob!

* Racers Ready!
---------------
7.
In order for our Race to be exciting, we need a way to calculate the time it takes a race car to complete a lap.

In the logic functions section, below the print functions section, create the function calculateTimeToCompleteLap() that has no parameters and returns an int type.

In the function, declare 3 int variables:

	. speed

	. acceleration

	. nerves

Initialize each to a random number between 1 and 3.

return the summation of speed, acceleration, and nerves.


Hint
You can generate a random number between 1 and 10 like:

(rand() % 10) + 1

8.
Now that we know how long it takes a race car to finish a lap, we need to be able to know the total time the race car has been racing.

In the logic functions, create the function updateRaceCar() and, since we need to change the total lap time for the given race car, make sure that it has a single single RaceCar pointer 
parameter named raceCar and has no output.

This function should find the time it took the raceCar to complete a lap and add it to the member variable totalLapTime.


Hint
You can define a structure pointer parameter in a function like:

void myFunc(struct myStruct* structPointer);  // `myStruct` pointer parameter

You can use the calcTimeToComplete() to get the time a race car takes to complete a lap.

You can access structure pointer type member variables using the -> operator.
For example using a Race pointer type:

race->currentLap // access member variable `currentLap`

9.
Lastly, we need to know who the new first place driver is and what car color they are driving.

In the logic functions section, create the function updateFirstPlace() that has the following parameters:

	. a Race pointer - race

	. a RaceCar pointer - raceCar1

	. a RaceCar pointer - raceCar2

and has no output.

This function should set the race member variables firstPlaceDriverName and firstPlaceRaceCarColor with:

	. raceCar1 member variables driverName and raceCarColor if its totalLapTime is less than or equal to raceCar2 totalLapTime

	. raceCar2 member variables driverName and raceCarColor, otherwise.

Hint
You can define a structure pointer parameter in a function like:

void myFunc(struct myStruct* structPointer);  // `myStruct` pointer parameter

* Count Down!
-------------
10.
Let’s put all our pieces together to create our digital race!

Above main(), create the function startRace() that has 2 RaceCar pointer parameters:

	. raceCar1

	. raceCar2

and returns no output.

This function should initialize a Race type named race with the following member variable values:

	. 5 - numberOfLaps

	. 1 - currentLap

	. "" - firstPlaceDriverName

	. "" - firstPlaceRaceCarColor

Hint
You can define a structure pointer parameter in a function like:

void myFunc(struct myStruct* structPointer);  // `myStruct` pointer parameter

You can initialize a structure like:

struct myStruct = {1,2,3}; // initializes `myStruct` member variables to `1`, `2`, `3` respectively

11.
Next we need to be able to simulate all the laps in the race, where, in every lap, each race car’s time is calculated and a first place driver and their race car color is announced.

In startRace(), create a for loop that loops numberOfLaps in Race.

Inside the loop:

	1. Update raceCar1 and raceCar2 totalLapTime member variable

	2. Updates the Race member variables firstPlaceDriverName and firstPlaceRaceCarColor

	3. Prints first place information

Hint
We can use the following functions to complete the steps above:

	. updateRaceCar()

	. updateFirstPlace()

	. printFirstPlaceAfterLap()

You can also use the & to specify the memory address of a variable as an argument to a pointer like:

int myNum = 10;
int* myNumPtr = &myNum; // `myNumPtr` holds the memory address of `myNum`

12.
After all the laps are complete, we need to be able to announce the winners name and their race car color.

In startRace(), after outside the for loop, print a congratulation message.


Hint
You can use the printCongratulation() function to help.

* Race!
-------
13.
Now that the race logic is complete, we can work on the entry point for the race simulation.

In main(), declare and initialize 2 RaceCar data types.

Then print out an intro message and begin the countdown.

Lastly, call startRace() with pointers to the RaceCar types you created.

Enjoy the race!


Hint
You can use:

	. printIntro()

	. printCountdown()

	. startRace()

You can pass the memory address of a variable to a pointer parameter by using &.

script.c
--------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Structures section
struct Race 
{
  int numberOfLaps;
  int currentLap;
  char* firstPlaceDriverName;
  char* firstPlaceRaceCarColor;
};

struct RaceCar
{
  char* driverName;
  char* raceCarColor;
  int totalLapTime;
};
// Print functions section
void printIntro()
{
  printf("Welcome to our main event digital race fans! I hope everybody has their snacks because we are about to begin!\n");
  printf("\n");
}

void printCountDown()
{
  printf("Racers Ready! In ...\n");
  printf("5\n4\n3\n2\n1\n");
  printf("Race!\n");
  printf("\n");
}

void printFirstPlaceAfterLap(struct Race race)
{
  printf("After lap number %d\n", race.currentLap);
  printf("First Place Is: %s in the %s race car!\n", race.firstPlaceDriverName, race.firstPlaceRaceCarColor);
  printf("\n");
}

void printCongratulation(struct Race race)
{
  printf("Let's all congratulate %s in the %s race car for an amazing performance.\n", race.firstPlaceDriverName, race.firstPlaceRaceCarColor);
  printf("\n");
  printf("It truly was a great race and everybody have a goodnight!\n");
}
// Logic functions section
int calculateTimeToCompleteLap()
{
  int speed = (rand() % 3) + 1;
  int acceleration = (rand() % 3) + 1;
  int nerves = (rand() % 3) + 1;

  return speed + acceleration + nerves;
}

void updateRaceCar(struct RaceCar* raceCar)
{
  raceCar->totalLapTime += calculateTimeToCompleteLap();
}

void updateFirstPlace(struct Race* race, struct RaceCar* raceCar1, struct RaceCar* raceCar2)
{
  if(raceCar1->totalLapTime <= raceCar2->totalLapTime)
  {
    race->firstPlaceDriverName = raceCar1->driverName;
    race->firstPlaceRaceCarColor = raceCar1->raceCarColor;
  } else
    {
      race->firstPlaceDriverName = raceCar2->driverName;
      race->firstPlaceRaceCarColor = raceCar2->raceCarColor;
    }
}

void startRace(struct RaceCar* raceCar1, struct RaceCar* raceCar2)
{
  struct Race race = {5, 0, "", ""};
  for (int i = 0; i < race.numberOfLaps; i++)
  {
    race.currentLap++;
    updateRaceCar(raceCar1);
    updateRaceCar(raceCar2);
    updateFirstPlace(&race, raceCar1, raceCar2);
    printFirstPlaceAfterLap(race);
  }
  printCongratulation(race);
}

int main() {
	srand(time(0));
  struct RaceCar raceCar1 = {"Artem", "Green", 0};
  struct RaceCar raceCar2 = {"Danil", "Black", 0};
  printIntro();
  printCountDown();
  startRace(&raceCar1, &raceCar2);
};

