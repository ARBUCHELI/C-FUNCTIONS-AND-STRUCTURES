# FUNCTIONS
-----------

* Introduction
--------------
1 min
As you continue to write more code there will be times when you’ll need to reuse a set of instructions. You might be tempted to reuse the code by copying and pasting it, but in times like 
this, a function is a great tool to use.

A function is a group of instructions that is given a name to be used elsewhere in the code, often repeatedly. Functions can take in a set of inputs and produce some output.

Cookie ingredients are input into a function, make-cookie. The output of the function is a cookie.

In the photo above we use the idea of a function to make cookies. We collect a set of instructions (the recipe) under the name makeCookie. Baking a cookie requires a set of inputs (the 
ingredients). The instructions inside the function act on the input ingredients to produce the output (a cookie!).

Functions are great because:

	. You can write DRY (Don’t Repeat Yourself) code.

	. You can execute any number of instructions with a single line of code.

	. Once a function exists, you only need to worry about the inputs and output and not about the instructions inside.

In C, you have already worked with one function. The main() function is the entry point to any C program and you will understand it better as you go through this lesson.

* Instructions
--------------
Look at the main() function in the script.c file. There are 2 lines, one that calls a function abs() and then the printf() function to output the value in absValue.

Run the program to see the output and think about all the things happening in the code that we can’t see. This is a good example of DRY (Don’t Repeat Yourself) coding in the C programming 
language.

script.c
--------
#include <stdio.h>
#include <stdlib.h>

int main(void) {
  int absValue = abs(-5);
  printf("%d\n", absValue);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Calling a Function
--------------------
6 min
As we’ve seen, the code printf("Hello, World\n") outputs the string between the parentheses to the console. The general usage of a function is to “call” the given name with a set of 
parentheses. Any input that is needed for the function is placed inside the parentheses.

These inputs are commonly known as the arguments of the function. Certain functions take no arguments, some take one and some take multiple. No matter the case, it is important to know 
what arguments a function expects so we use the correct values in the correct spots.

The printf() function can change its behavior based on the number of arguments it receives.

#include <stdio.h>

printf("Hello, World!"); // Outputs: Hello, World!
int num = 9;
printf("My number is %d", num); // Outputs: My number is 9

In the example above, the first printf() call takes the string "Hello, World!" as an argument. The output is the string. The second printf() call takes two arguments, a string and a 
variable. The output this time is the string with the variable inserted where indicated by %d. These two uses of printf() show the flexibility that is allowed when using functions.

Lastly, a function can return its output, which can then be used further. For example:

#include <stdio.h>
#include <stdlib.h>

int absValue = abs(-5);
printf("Absolute value of -5: %d\n", absValue);

// Output
// Absolute value of -5: 5

In the example above, we use a different function abs(), which returns the absolute value of an integer passed as an argument. We are able to use this function by adding the line 
#include <stdlib.h> to the top of the code.

As we can see, when we call abs(-5) we are assigning it to the integer absValue. This assigns the value returned by abs(-5) to the variable absValue. This is shown by outputting the value 
which is 5.

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s take a look at the different function argument configurations of printf().

In script.c, add a call to printf() with no arguments.

You should get an error when you call printf() with no arguments?


Hint
Use the following syntax:

printf();

Checkpoint 2 Passed
2.
Now add a string of your choice to the arguments of printf().

Does the code work now?


Hint
Use the following syntax:

printf("Your string.");

Checkpoint 3 Passed
3.
Now add the value in variable num1 to the output.

Be sure to add the variable as an argument and adjust your string to support the variable output.


Hint
Use the following syntax:

printf("Your string %d", variable);

Checkpoint 4 Passed
4.
Can we add another variable to the output? Give it a try!

Add the variable num2 as the 3rd argument and adjust the string to output the values in both variables.


Hint
Use the following syntax:

printf("Your string %d %d", variable1, variable2);

script.c
--------
#include <stdio.h>

int main(void) {
  int num1 = -5;
  int num2 = 42;
  // Write your code below
  //printf("My name is Bucheli");
  printf("This is a negative number: %i, and this is a positive number: %i", num1, num2);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Library Functions
-------------------
13 min
Now that we know how to call functions, use their arguments and capture their return values, let’s take a look at some functions provided by the C programming language.

C gives us access to many useful libraries that include many different functions for you to use. In order to have access to these functions you need to include header files like <stdio.h> 
and <stdlib.h>.

You have already used printf() to output text to the console and learned about abs() to find the absolute value of an integer. Here are a few more functions we might use in your 
programs:

	. ceil(): takes any number as an argument, rounds it up to the nearest integer, and returns the integer.

	. log(): takes an integer as an argument and returns the natural logarithm of the given number.

	. toupper(): takes a char as an argument and returns the uppercase of any alphabetic character.

	. isupper(): takes a char as an argument and returns 1 if the character is an uppercase letter, 0 otherwise.

Let’s use these functions in some code:

#include <stdio.h>
#include <math.h>
#include <ctype.h>

int main() {
  float number = 4.5;
  char letter = 'a';
  printf("%f\n", ceil(number)); // 5.000000
  printf("%f\n", log(number)); // 1.504077
  printf("%d\n", isupper(letter)); // 0
  letter = toupper(letter);
  printf("%d\n", isupper(letter)); // 1
}

In the above example:

	. The math.h and ctype.h libraries are used in this code.

	. The number variable is passed to ceil() and output. The result is 5.000000.

	. The number variable is passed to log() and output. The result is 1.504077.

	. The letter variable is passed to isupper() and output. The result is 0 which represents False.

	. The letter variable is passed to toupper() and assigned to letter.

	. The new value in the letter variable is passed to isupper() and output. The result is 1 which represents True.

There are many useful functions contained in the C standard libraries. Here is a list of some of them. It is worth looking through them to see how they can help your code.

* Instructions
--------------
Checkpoint 1 Passed
1.
Now let’s look at some more libraries and their functions to create some random numbers.

In script.c there are 3 #include statements:

	. The first is needed for printf().

	. #include <stdlib.h> is needed for 2 random number generator functions, srand() and rand().

	. #include <time.h> is needed to use the time() function.

Inside the main() function is the line srand(time(NULL));. Without this line of code, every random number generated in this exercise will be the same number each time you run the code. 
Look in the hint for more details on this line of code.

Move to the next exercise to continue with the random number code.


Hint
The srand() function is used to set the seed for the random number generator. The seed initializes the random generation and should be a number that changes over time. The time() function 
is used as the srand() argument to ensure that the seed is a different number every time the code is run. When passed the argument NULL, the time() function will return the number of 
seconds passed since the date, January 1, 1970.

Checkpoint 2 Passed
2.
With the random number generator initialized, it is time to get a random number. This is done by saving the return value of the function rand().

Inside the main() function:

	. Declare an integer variable randomNumber and set it equal to rand()

	. Output the value of randomNumber using printf()

If you run the code multiple times, you should get a large but somewhat different number each time.


Hint
Use the following syntax:

int randomVariable = rand();
printf("%d\n", randomVariable)

Checkpoint 3 Passed
3.
There’s a good chance if you were programming a game that wanted to roll some dice, the number being generated right now would not be helpful in its current form. To get the number we 
want we will use the modulus (%) operator.

Inside the main() function:

	. Using %, change the line of code, int randomNumber = rand() so that randomNumber will be between 0 and 19

	. Add a + 1 to the end of the code so randomNumber becomes a number between 1 and 20.

Every time you run the code you should now get a number between 1 and 20.


Hint
Use the following syntax:

int randomVariable = rand() % 20 + 1;

The number you specify as the max in rand() % is noninclusive.

script.c
--------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main(void) {
  srand(time(NULL));
  // Write your code below
  int randomNumber = rand() % 20 + 1;
  printf("%i", randomNumber);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Defining Functions
--------------------
7 min
We’ve seen how C comes with many handy libraries full of functions for us to use. Now let’s learn how to make our own! To begin, we need a function signature.

The function signature tells us 3 things:

	. the function name

	. how many parameters (inputs) and their types

	. what type of return value is to be expected

returnType functionName (type1 parameter1, type2 parameter2)

If a function isn’t going to return any value, void is used as the return type. void indicates to the compiler that the function returns no data and should not expect to see the return 
keyword. Any of the types covered in previous lessons, int, char, boolean, etc, can be used as the return type of a function.

Similarly, if a function has no parameters void should be in place of any parameters. The parameters listed inside the parenthesis are like variable declarations. Each parameter should 
start with the type and then the name of the parameter.

The code statements “inside” the function are known as the body of the function and are enclosed with curly braces after the function signature.

returnType functionName (type1 parameter1, type2 parameter2) {
  // code statement 1;
  // code statement 2;

return output;
}

The signature and the body are the two parts we need to create our own functions.

void makeCookie(){
  printf("Milk\n");
  printf("Flour\n");
  printf("Chocolate Chips\n");
  printf("Butter\n");
  printf("Thanks for the ingredients, here's a cookie!\n");
}

* Instructions
--------------
Checkpoint 1 Passed
1.
Time to create your first function!

Above the main() function:

	. Define a new function named printMyFavoriteAnimal()

	. The function returns no value

	. The function has no parameters

	. Leave the body { } of the function empty for now

Hint
Use the following syntax:

void functionName(void) {

}

Checkpoint 2 Passed
2.
Inside the body of the function:

	. Output the message “My favorite animal is a YOUR_ANIMAL_NAME\n”

This completes the function so move on to call your first complete function!


Hint
Inside the body of printMyFavoriteAnimal() use the following syntax:

printf("Favorite animal string.")

Checkpoint 3 Passed
3.
Lastly, inside the main() function:

	. Call the printMyFavoriteAnimal() function

Hint
Here’s an example of calling a user-defined function:

int main(){
  functionName();
}

script.c
--------
#include <stdio.h>

// Write your code below
void printMyFavoriteAnimal()
{
  printf("My favorite animal is a Cat called Soso\n");
}

int main(void) {
  printMyFavoriteAnimal();
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Function Return Values
------------------------
6 min
We now know how to define a function, so let’s look closer at function return values. Calling a function to do some work and return a value is a common use of functions. It is important 
to understand how to define what type of value is returned and to ensure that it is returned.

Many of the C types we’ve seen so far can be used as a function return type like int, double, char, and even pointers.

int getSecretNumber() {
  int secretNumber = 7;
  return secretNumber;  
}

In the example above:

	. The function has a return type int

	. The variable secretNumber, of type int, is set to 7

	. The variable is returned using return secretNumber

The type of the value returned inside the function must match the type defined in the function signature. If there is a mismatch you will get a compilation error telling you of the 
mismatch.

Once the return statement is executed, the function gives control back to the function that called it and no further code within the function will be executed. For example:

int getSecretNumber(){
  int secretNumber = 7;
  return secretNumber;  
  printf("Don’t tell anyone\n");
}

The printf() statement will not execute and "Don’t tell anyone" will not be displayed in the output terminal.

* Instructions
--------------
Checkpoint 1 Passed
1.
Continuing with random number generation, modify a function definition so it can return a random number from 1 - 1000:

The function getRandom1000() currently has a return type of void.

	. Change the return type so the function can return an integer.

Hint
Use the following syntax:

returnType random1000(void){
  
}

Checkpoint 2 Passed
2.
Now at the end of the getRandom1000() body:

	. Return the variable random1000

Hint
Use the following syntax:

returnType random1000(void) {
  srand(time(NULL));
  variableType randomVariable = rand() % 1000 + 1;
  return randomVariable;
}

Checkpoint 3 Passed
3.
Lastly, in the main() function:

	. Replace the 0 with a call getRandom1000() and store the return value in the variable randomNumber.

Hint
Use the following syntax:

variableType randomVariable = randomFunction();

script.c
--------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Modify the code below
int getRandom1000() {
  int random1000 = rand() % 1000 + 1;
  return random1000;
}

int main(void) {
  srand(time(NULL));
  // Modify the code below
  int randomNumber = getRandom1000();
  printf("My random number is: %d", randomNumber);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Function Parameters
---------------------
7 min
In the last exercise, we created a function random1000() that returned a random number between 1 and 1000. What if we wanted the upper bound to be 10000 or 1000000? We could define new 
functions like getRandom10000() or getRandom1000000(). There must be a better way.

Besides returning values, functions can customize their behavior based on the argument passed to them. This is done by defining parameters in the function signature.

Parameters are variable definitions that take place in between the parentheses of the function signature. They have a type and are given a name to be used inside and only inside the 
function body. Let’s take a look!

int addTwo(int number1, int number2) {
  int sum = number1 + number2;
  return sum;
}

int main() {
  int addedNumbers = addTwo(3, 6);
  // addedNumbers = 9
}

In the example above:

	. The addTwo() function is defined with an integer return type

	. The function takes two integer parameters, number1 and number2 to be used inside the function body

	. The function adds the numbers together, assigns them to an integer, sum and returns sum

One thing to keep in mind is if the parameter type and the argument passed to a function do not match, a warning or an error will occur when we run the code.

#include <stdio.h>

void sayIt(int number) {
  printf("%d\n", number);
}

int main(void) {
  char* string = "Hi!";
  sayIt(string);
}

The code above will produce a warning that the sayIt function argument type, char* and the parameter type, int are not the same. This will result in unwanted behavior.

The last thing to note about parameters is if a function does not have any parameters you should put void in between the parentheses. Leaving them empty will usually be OK, but it is best 
practice to use void.

* Instructions
--------------
Checkpoint 1 Passed
1.
The getRandom1000() function has been changed to getRandomNumber(). Modify the remaining part of the function definition:

	. Add an integer parameter maxNumber

Hint
Use the following function definition syntax:

returnType functionName(parameterType parameter) {

}

Checkpoint 2 Passed
2.
Inside the getRandomNumber() body, use the parameter to set the range:

	. Replace the upper range number in the random equation with, maxNumber

Hint
Use the following syntax:

randomVariable = rand() % parameterVariable + 1

Checkpoint 3 Passed
3.
Now test the new function out!

Inside the main() function:

	. Assign randomNumber to getRandomNumber() with the argument 100

You can now generate a random number between 1 and any number you want. Good job!


Hint
Use the following syntax:

functionName

script.c
--------
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Modify the code below
int getRandomNumber(int maxNumber) {
  int randomNumber = rand() % maxNumber + 1;
  return randomNumber;
}

int main(void) {
  srand(time(NULL));
  // Modify the code below
  int randomNumber = getRandomNumber(100);
  printf("My random number is: %d", randomNumber);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Functions with Pointers
-------------------------
11 min
We’ve made great progress so far with functions!

Up to this point when a function has received an argument, the function makes a copy of the argument’s value and stores it in the parameter variable. Now any work that the function does 
on that parameter variable will not affect the original value passed in.

For example:

#include <stdio.h>

void myFunc(int a){
  a = a + 2;
  printf("a inside myFunc(): %d\n", a);
}

int main(){
  int a = 10;
  myFunc(a);
  printf("a in main(): %d\n", a);
}

//OUTPUT:
// a inside myFunc(): 12;
// a in main(): 10;

This is great because we can safely alter the variable value inside the function while maintaining the original value outside.

What if we want to alter the variable inside the function? Instead of passing the actual variable as an argument, we can pass a pointer to the variable. Remember, a pointer is a variable 
that holds the memory address to another variable. The memory address tells you where the original variable is in memory.

Before we pass a pointer to a function we need to make sure the parameter type matches the type of pointer we are passing. With a pointer as a parameter, the body of the function can 
directly alter the original value of the pointer that was passed:

void myFunc(int* a){
  *a = *a+2;
  printf("a inside myFunc(): %d\n", *a);
}

int main(){
  int a = 10;
  int* aPointer = &a;
  myFunc(aPointer);
  printf("a in main(): %d\n", a);
}

//OUTPUT:
// a inside myFunc(): 12;
// a in main(): 12;

A benefit of using a pointer to a variable as opposed to the variable itself is that it saves memory as the function does not need to allocate more memory for complex data types like 
arrays.

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s look at how we can change values in functions using pointers.

Above the main() function:

	. Define a function named incrementAge() that returns no value

	. The function should have one parameter, an integer pointer agePointer

	. The body of the function should increment the value that agePointer points to

Hint
Use the following syntax:

void functionName(parameterType* pointer) {
  *pointer = *pointer + 1;
}

Checkpoint 2 Passed
2.
Inside the main() function:

	. Define an integer age, and set it to your age

	. Call incrementAge() and pass the address of the variable age as the argument

	. Output the value of age after the function call

You should see that the variable was incremented using the function and the pointer.


Hint
Use the following syntax to pass a variables address as an argument:

functionName(&variableName);

script.c
--------
#include <stdio.h>

// Write your code below
void incrementAge(int* agePointer)
{
  *agePointer += 1;
}

int main(void) {
  int age = 46;
  incrementAge(&age);
  printf("%i\n", age);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------










































































































































































































