# FUNCTIONS
-----------

* Introduction
--------------
1 min
As you continue to write more code there will be times when you’ll need to reuse a set of instructions. You might be tempted to reuse the code by copying and pasting it, but in times like 
this, a function is a great tool to use.

A function is a group of instructions that is given a name to be used elsewhere in the code, often repeatedly. Functions can take in a set of inputs and produce some output.

Cookie ingredients are input into a function, make-cookie. The output of the function is a cookie.

In the photo above we use the idea of a function to make cookies. We collect a set of instructions (the recipe) under the name makeCookie. Baking a cookie requires a set of inputs (the 
ingredients). The instructions inside the function act on the input ingredients to produce the output (a cookie!).

Functions are great because:

	. You can write DRY (Don’t Repeat Yourself) code.

	. You can execute any number of instructions with a single line of code.

	. Once a function exists, you only need to worry about the inputs and output and not about the instructions inside.

In C, you have already worked with one function. The main() function is the entry point to any C program and you will understand it better as you go through this lesson.

* Instructions
--------------
Look at the main() function in the script.c file. There are 2 lines, one that calls a function abs() and then the printf() function to output the value in absValue.

Run the program to see the output and think about all the things happening in the code that we can’t see. This is a good example of DRY (Don’t Repeat Yourself) coding in the C programming 
language.

script.c
--------
#include <stdio.h>
#include <stdlib.h>

int main(void) {
  int absValue = abs(-5);
  printf("%d\n", absValue);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Calling a Function
--------------------
6 min
As we’ve seen, the code printf("Hello, World\n") outputs the string between the parentheses to the console. The general usage of a function is to “call” the given name with a set of 
parentheses. Any input that is needed for the function is placed inside the parentheses.

These inputs are commonly known as the arguments of the function. Certain functions take no arguments, some take one and some take multiple. No matter the case, it is important to know 
what arguments a function expects so we use the correct values in the correct spots.

The printf() function can change its behavior based on the number of arguments it receives.

#include <stdio.h>

printf("Hello, World!"); // Outputs: Hello, World!
int num = 9;
printf("My number is %d", num); // Outputs: My number is 9

In the example above, the first printf() call takes the string "Hello, World!" as an argument. The output is the string. The second printf() call takes two arguments, a string and a 
variable. The output this time is the string with the variable inserted where indicated by %d. These two uses of printf() show the flexibility that is allowed when using functions.

Lastly, a function can return its output, which can then be used further. For example:

#include <stdio.h>
#include <stdlib.h>

int absValue = abs(-5);
printf("Absolute value of -5: %d\n", absValue);

// Output
// Absolute value of -5: 5

In the example above, we use a different function abs(), which returns the absolute value of an integer passed as an argument. We are able to use this function by adding the line 
#include <stdlib.h> to the top of the code.

As we can see, when we call abs(-5) we are assigning it to the integer absValue. This assigns the value returned by abs(-5) to the variable absValue. This is shown by outputting the value 
which is 5.

* Instructions
--------------
Checkpoint 1 Passed
1.
Let’s take a look at the different function argument configurations of printf().

In script.c, add a call to printf() with no arguments.

You should get an error when you call printf() with no arguments?


Hint
Use the following syntax:

printf();

Checkpoint 2 Passed
2.
Now add a string of your choice to the arguments of printf().

Does the code work now?


Hint
Use the following syntax:

printf("Your string.");

Checkpoint 3 Passed
3.
Now add the value in variable num1 to the output.

Be sure to add the variable as an argument and adjust your string to support the variable output.


Hint
Use the following syntax:

printf("Your string %d", variable);

Checkpoint 4 Passed
4.
Can we add another variable to the output? Give it a try!

Add the variable num2 as the 3rd argument and adjust the string to output the values in both variables.


Hint
Use the following syntax:

printf("Your string %d %d", variable1, variable2);

script.c
--------
#include <stdio.h>

int main(void) {
  int num1 = -5;
  int num2 = 42;
  // Write your code below
  //printf("My name is Bucheli");
  printf("This is a negative number: %i, and this is a positive number: %i", num1, num2);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------





















































